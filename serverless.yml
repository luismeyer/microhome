service: telegram-home-assistant
frameworkVersion: '2'
useDotenv: true

plugins:
  - serverless-offline

provider:
  name: aws
  lambdaHashingVersion: 20201221
  runtime: nodejs12.x
  region: eu-central-1
  environment:
    MODULE_TABLE: ModuleTable
    USER_TABLE: UserTable
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.MODULE_TABLE}"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USER_TABLE}"


package:
  individually: true

functions:
  # lifx-service
  api:
    handler: packages/lifx-service/dist/handler.api
    events:
      - http: 
          path: services/lifx
          method: ANY
          cors: true
    package:
      patterns:
        - packages/dist/**
        - packages/node_modules/**

  # db-service 
  createModule:
    handler: packages/db-service/dist/handlers/module/create.createModule
    events:
      - http:
          path: module
          method: post
          cors: true

  listModules:
    handler: packages/db-service/dist/handlers/module/list.listModule
    events:
      - http:
          path: module
          method: get
          cors: true
        
  getModule:
    handler: packages/db-service/dist/handlers/module/get.getModule
    events:
      - http:
          path: module/{moduleid}
          method: get
          cors: true        

  createUser:
    handler: packages/db-service/dist/handlers/user/create.createUser
    events:
      - http:
          path: user/{userid}
          method: put
          cors: true

  getUser:
    handler: packages/db-service/dist/handlers/user/get.getUser
    events:
      - http:
          path: user/{userid}
          method: get
          cors: true

  updateUser:
    handler: packages/db-service/dist/handlers/user/update.updateUser
    events:
      - http:
          path: user/{userid}
          method: post
          cors: true

  deleteUser:
    handler: packages/db-service/dist/handlers/user/delete.deleteUser
    events:
      - http:
          path: user/{userid}
          method: delete
          cors: true     
  
  listUsers:
    handler: packages/db-service/dist/handlers/user/list.listUsers
    events:
      - http:
          path: user/
          method: get
          cors: true
          
  listUserModules:
    handler: packages/db-service/dist/handlers/user/list-modules.listUserModules
    events:
      - http:
          path: user/{userid}/module
          method: get
          cors: true
  
  getUserModule:
    handler: packages/db-service/dist/handlers/user/module.getUserModule
    events:
      - http:
          path: user/{userid}/module/{moduleid}
          method: get
          cors: true
  
  addUserModule:
    handler: packages/db-service/dist/handlers/user/add-module.addUserModule
    events:
      - http:
          path: user/{userid}/module/{moduleid}
          method: put
          cors: true
  
  removeUserModule:
    handler: packages/db-service/dist/handlers/user/remove-module.removeUserModule
    events:
      - http:
          path: user/{userid}/module/{moduleid}
          method: delete
          cors: true

  getUserModuleDevice:
    handler: packages/db-service/dist/handlers/user/module-device.getUserModuleDevice
    events:
      - http:
          path: user/{userid}/module/{moduleid}/devices/{deviceid}/functions
          method: get
          cors: true

  getUserModuleDeviceFunction:
    handler: packages/db-service/dist/handlers/user/module-device-function.getUserModuleDeviceFunction
    events:
      - http:
          path: user/{userid}/module/{moduleid}/devices/{deviceid}/functions/{function}
          method: get
          cors: true

  updateUserToken:
    handler: packages/db-service/dist/handlers/user/token.updateUserToken
    events:
      - http:
          path: user/token/{edittoken}
          method: post
          cors: true
  
  updateUserModuleToken:
    handler: packages/db-service/dist/handlers/user/module-token.updateUserModuleToken
    events:
      - http:
          path: user/{userid}/module/{moduleid}/token
          method: post
          cors: true

resources:
  Resources:
    UserDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.USER_TABLE}

    ModuleDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: N
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.MODULE_TABLE}
